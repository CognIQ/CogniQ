name: _build

on:
  workflow_call:
    inputs:
      image_tag:
        description: 'Image tag'
        type: string
        required: false
      force:
        description: 'Force build'
        type: boolean
        required: false
      base_ref:
        description: 'Base ref'
        type: string
        required: false
        default: 'main'


# Permissions can only be downgraded by the called workflow.
# Make sure that the calling workflow has at least the following permissions.
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set outputs
      id: vars
      run: |
        # Extract branch or tag from GitHub ref, and remove 'v' prefix for tags
        DEFAULT_IMAGE_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' -e '/^refs\/tags\//s/^v//')
        if [[ -n "${{ inputs.image_tag }}" ]]; then
          DEFAULT_IMAGE_TAG=${{ inputs.image_tag }}
          echo "image_tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "image_tag=$DEFAULT_IMAGE_TAG" >> $GITHUB_OUTPUT
        fi

        echo "timestamp"=$(date --iso-8601=seconds) >> $GITHUB_OUTPUT

        echo "short_sha=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

        echo "short_commit_message=$(git show --no-patch --format=%s)" >> $GITHUB_OUTPUT
        echo "author_email=$(git show --no-patch --format=%ae)" >> $GITHUB_OUTPUT

    - id: should_build
      env:
        BASE_REF: ${{ inputs.base_ref }}
        FORCE_BUILD: ${{ inputs.force }}
      run: |
        set -ex
        # If force build is set to true, we set SHOULD_BUILD to true and exit.
        if [[ $FORCE_BUILD == "true" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Fetch the BASE_REF from origin.
        git fetch origin $BASE_REF
        MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD)

        # Prepare ignored patterns from .dockerignore file.
        mapfile -t IGNORED_PATTERNS < <(awk 'NF && $1!~/^#/' .dockerignore)
        IGNORED_PATTERNS_GREP=$(printf "|%s" "${IGNORED_PATTERNS[@]}")
        IGNORED_PATTERNS_GREP=${IGNORED_PATTERNS_GREP:1}  # remove the leading |

        # Get the changed files.
        CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)

        # By default, we assume no need to build.
        SHOULD_BUILD=false

        # If there are changed files, we check them against ignore patterns.
        if [[ -n "$CHANGED_FILES" ]]; then
          while IFS= read -r FILE; do
            if ! echo "$FILE" | grep -Eq "$IGNORED_PATTERNS_GREP"; then
              SHOULD_BUILD=true
              break
            fi
          done <<< "$CHANGED_FILES"
        fi

        # Output the value of SHOULD_BUILD.
        echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

    - name: Build and push
      uses: docker/build-push-action@v4
      id: build
      if: steps.should_build.outputs.should_build == 'true'
      with:
        push: true
        tags: |
          ghcr.io/cogniq/cogniq:${{ steps.vars.outputs.image_tag }}
          ghcr.io/cogniq/cogniq:${{ steps.vars.outputs.short_sha }}
        cache-from: type=registry,ref=ghcr.io/cogniq/cogniq:buildcache
        cache-to: type=registry,ref=ghcr.io/cogniq/cogniq:buildcache,mode=max,compression=zstd,compression-level=2,ignore-error=true
        build-args: |
          BUILD_TIME=${{ steps.vars.outputs.timestamp }}
          BUILD_VERSION=${{ steps.vars.outputs.image_tag }}
          BUILD_SHA=${{ steps.vars.outputs.short_sha }}
        labels: |
          org.opencontainers.image.url=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
