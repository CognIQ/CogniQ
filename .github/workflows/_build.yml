name: _build

on:
  workflow_call:
    inputs:
      semver:
        description: 'semantic version to tag with'
        type: string
        required: false
      force:
        description: 'Force build'
        type: boolean
        required: false
      base_ref:
        description: 'Base ref'
        type: string
        required: false
        default: 'main'


# Permissions can only be downgraded by the called workflow.
# Make sure that the calling workflow has at least the following permissions.
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Should Build?
      id: should_build
      env:
        BASE_REF: ${{ inputs.base_ref }}
        FORCE_BUILD: ${{ inputs.force }}
      run: |
        # If force build is set to true, we set SHOULD_BUILD to true and exit.
        if [[ $FORCE_BUILD == "true" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Fetch the BASE_REF from origin.
        git fetch origin $BASE_REF
        MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD)

        # Get the changed files.
        CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)

        # By default, we assume no need to build.
        SHOULD_BUILD=false

        # If there are changed files, we check them against ignore patterns.
        if [[ -n "$CHANGED_FILES" ]]; then
          FILES_TO_BUILD=$(echo "$CHANGED_FILES" | tr ' ' '\n' | rsync --list-only --files-from=- --exclude-from=.dockerignore . /dev/shm )
          CHANGE_COUNT=$(echo $FILES_TO_BUILD | wc -l)
          echo $FILES_TO_BUILD
          if [[ $CHANGE_COUNT -gt 0 ]]; then
            SHOULD_BUILD=true
          fi
        fi

        # Output the value of SHOULD_BUILD.
        echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      if: steps.should_build.outputs.should_build == 'true'
      uses: docker/setup-buildx-action@v2

    - name: Log in to registry
      if: steps.should_build.outputs.should_build == 'true'
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

    - id: meta
      if: steps.should_build.outputs.should_build == 'true'
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/cogniq/cogniq
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}},value=${{ inputs.semver }}
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.semver }}
          type=semver,pattern=v{{major}},value=${{ inputs.semver }}
          type=sha,prefix=,format=short


    - name: Build and push
      if: steps.should_build.outputs.should_build == 'true'
      uses: docker/build-push-action@v4
      id: build
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=registry,ref=ghcr.io/cogniq/cogniq:buildcache
        cache-to: type=registry,ref=ghcr.io/cogniq/cogniq:buildcache,mode=max,compression=zstd,compression-level=2,ignore-error=true
        labels: ${{ steps.meta.outputs.labels }}
